<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>recent_Life_update_1</title>
    <link href="/2022/04/08/my-recent-life/"/>
    <url>/2022/04/08/my-recent-life/</url>
    
    <content type="html"><![CDATA[<h2 id="关于考研-就业">关于考研 &amp; 就业</h2><h3 id="Further-education">Further education</h3><ol><li>基于个人规划考虑</li><li>推荐但不是必要</li><li>成本考虑</li><li>考研含金量</li></ol><hr><p>一些在研究生阶段的回忆</p><p><img src="/2022/04/08/my-recent-life/IMG_1723.JPG" alt="去广州取签证"><br><img src="/2022/04/08/my-recent-life/IMG_1934.JPG" alt="到达北京西站"><br><img src="/2022/04/08/my-recent-life/IMG_1961.JPG" alt="和苗苗告别"><br><img src="/2022/04/08/my-recent-life/IMG_4991.JPG" alt="和Asun"><br><img src="/2022/04/08/my-recent-life/IMG_6769.JPG" alt="毕业了！"></p><h3 id="Getting-a-job">Getting a job</h3><ol><li>趁年轻多尝试！！！</li><li>要权衡好生活重心</li><li>自己到底要什么？</li></ol><h2 id="关于驾照">关于驾照</h2><blockquote><p>终于是把科三考完了 🚘</p></blockquote><h2 id="关于兴趣爱好">关于兴趣爱好</h2><ol><li>面包师傅🍞技能点升级</li></ol><blockquote><p>获得厨师机后的快乐 😸</p></blockquote><p><img src="/2022/04/08/my-recent-life/IMG_8821.JPG" alt="来自蒙自甜茶"><br><img src="/2022/04/08/my-recent-life/IMG_8843.jpg" alt="椰香奶酥切片吐司_1"><br><img src="/2022/04/08/my-recent-life/IMG_8844.jpg" alt="椰香奶酥切片吐司_2"></p><ol start="2"><li>健身技能点提升🏃‍♀️</li></ol><blockquote><p>sumo deadlift可以用体重等量做组了（6-8RM）</p></blockquote><p><img src="/2022/04/08/my-recent-life/IMG_8670.JPG" alt="IMG_8670"></p><blockquote><p>(Incline)Barbell bench press 可用2.5kg杠铃片做组（5-6RM）<br>[with two activation sets with empty barbell]</p></blockquote><p><img src="/2022/04/08/my-recent-life/IMG_8880.JPG" alt="IMG_8880"></p><ol start="3"><li>关于骑行</li></ol><blockquote><p>这一生很热爱的一件事情<br>登过西北勒山顶！！<br>在风车下啃过鸡腿！🍗</p></blockquote><p><img src="/2022/04/08/my-recent-life/traveler.png" alt="碧色寨"></p><p><img src="/2022/04/08/my-recent-life/IMG_3008.JPG" alt="IMG_3008"><br><img src="/2022/04/08/my-recent-life/IMG_3016.JPG" alt="IMG_3016"><br><img src="/2022/04/08/my-recent-life/IMG_3025.jpg" alt="IMG_3025"><br><img src="/2022/04/08/my-recent-life/IMG_3098.JPG" alt="IMG_3098"></p><h2 id="关于解压方式">关于解压方式</h2><blockquote><p>Lego lover😴</p></blockquote><p><img src="/2022/04/08/my-recent-life/IMG_8884.JPG" alt="Land Rover Defender "><br><img src="/2022/04/08/my-recent-life/IMG_8885.JPG" alt="Kobe Bryant"><br><img src="/2022/04/08/my-recent-life/IMG_8886.JPG" alt="家里的乐高墙"></p><blockquote><p>最重要的就是找到合适自己的方式</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>life_vlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言语法基础总结</title>
    <link href="/2022/03/02/c-summary/"/>
    <url>/2022/03/02/c-summary/</url>
    
    <content type="html"><![CDATA[<h1>C语言语法基础总结</h1><p><em>It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.</em> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="用100个函数操作一个数据结构比仅用10个函数但是操作10个不同的数据结构要好。Epigrams on Programming 编程警句 ">[1]</span></a></sup></p><h2 id="关键概念">关键概念</h2><h4 id="1-位，字节和字">1.  位，字节和字</h4><blockquote><p><strong>位（bit）：</strong> 最小的存储单元，也称比特位。可以存储 0 或 1（或者说，位用于存储“开”或“关”）</p><p><strong>字节（byte）：</strong> 1 byte = 8 bit 既然 1 位可以表示 0 或 1，那么 1 字节就有 256 （2^8）种 0/1 组合，通过二进制编码（仅用 0/1 便表示数字），便可表示 0 ~ 255 的整数或一组字符。</p><p><strong>字（word）：</strong> 是设计计算机时给定的自然存储单位。对于 8 位 的微型计算机（如：最初的苹果机），1 字长 只有 8 位，从那以后，个人计算机的字长增至 16 位，32位，直至目前的 64位。计算机字长越大，其数据转移越快，允许访问的内存越多。</p></blockquote><h4 id="2-数据结构：-数据的表现形式，类型-组织形式">2. 数据结构： 数据的表现形式，类型+组织形式</h4><h4 id="3-C语言基本程序结构">3. C语言基本程序结构</h4><p><img src="https://hairrrrr.github.io/assets/2020-11-30-1.png" alt></p><h4 id="4-类型">4. 类型</h4><blockquote><p>每一个变量都有<strong>类型</strong>（type）。类型用来描述变量的数据的种类，也称<strong>数据类型</strong>。</p></blockquote><p>数值型变量的类型决定了变量所能存储的最大值与最小值，以及是否允许小数点后出现数字。</p><blockquote><p><strong>int</strong>（integer）：即整型，表示整数。</p></blockquote><p>数据类型还有很多，目前除了 int 以外，我们只再使用另一种：</p><blockquote><p><strong>float</strong>（floating-point）: 浮点型，可以表示小数</p></blockquote><p><strong>注意</strong> ：warning ：：虽然 float 型可以带小数，但是进行<strong>算术运算</strong>时，float 型要比 int 型慢，而且 float 通常只是一个值的近似值。（比如在一个float 型变量中存储 0.1， 但其实可能这个变量的值为 0.09999987，这是舍入造成的误差）</p><h4 id="5-关键字">5. 关键字</h4><blockquote><p>int 与float 都是C语言的<strong>关键字</strong>（keyword）,关键字是语言定义的单词，<strong>不能用做其他用途</strong>。比如不能用作命名函数名与变量名。</p></blockquote><p>关键字：<em>斜体代表C99新增关键字</em></p><table><thead><tr><th>auto</th><th>enum</th><th>unsigned</th><th>break</th><th>extern</th></tr></thead><tbody><tr><td>return</td><td>void</td><td>case</td><td>float</td><td>short</td></tr><tr><td>volatile</td><td>char</td><td>for</td><td>signed</td><td>while</td></tr><tr><td>const</td><td>goto</td><td>sizeof</td><td>continue</td><td>if</td></tr><tr><td>static</td><td>default</td><td>struct</td><td>do</td><td>int</td></tr><tr><td>switch</td><td>double</td><td>long</td><td>typedef</td><td>else</td></tr><tr><td>register</td><td>union</td><td></td><td></td><td></td></tr><tr><td><em>restrict</em></td><td><em>inline</em></td><td><em>_Bool</em></td><td><em>_Complex</em></td><td><em>_Imaginary</em></td></tr></tbody></table><p>如果关键字使用不当（关键字作为变量名），编译器会将其视为语法错误。</p><h4 id="6-声明">6. 声明</h4><blockquote><p><strong>声明</strong>（declaration）：在使用变量（variable）之前，必须对其进行声明（为编译器所作的描述）。</p><p>声明的方式为：数据类型 + 变量名（程序员自己决定变量名，命名规则后面会讲）</p></blockquote><p>示例中的 <code>int weight</code>完成了两件事情。第一，变量名为 weight。第二，int 表明这个变量是整型。</p><p>编译器用这些信息为变量 weight 在内存中分配空间。</p><h4 id="7-命名">7. 命名</h4><blockquote><p>weight,height 都是<strong>标识符</strong>，也就是一个变量，函数或其他实体的名称。因此，声明将特定标识符与计算机内存的特定位置联系起来，同时也就确定了存储在某位置的信息类型或数据类型。</p></blockquote><p><strong>变量、函数、宏 和 其他实体的名字</strong> 叫做 <strong>标识符</strong> 。标识符可以含有字母、数字和下划线，但是 <strong><u>必须以「字母」或者「下划线」开头</u></strong> 。</p><p>C 语言的标识符是区分大小写的。即：star，Star，STAR 是不同的。</p><p>命名风格最好使用 <strong>下划线方法</strong> ，并且坚持一种风格即可。</p><p>C 语言对标识符的最大长度没有限制，所以不必担心使用较长的描述性名字。</p><p><strong>声明变量的理由</strong>：</p><ol><li>把所有变量放在一处，方便读者查找和理解程序的用途。</li><li>声明变量可以促使你在编写程序之前做好计划（比如你的程序要用什么变量，你可以提前规划）。</li><li>声明变量有助于发现程序中的小错误，如拼写错误。</li><li><strong>不提前声明变量，C程序编译将无法通过</strong></li></ol><h4 id="8-赋值">8. 赋值</h4><blockquote><p>赋值（assignment）：变量通过赋值的方式获得值。</p></blockquote><p>示例中，<code>weight = 160; </code>是一个 <strong>赋值表达式语句</strong>。意思是“把值 160 赋给 变量 weight”。</p><p>在执行 <code>int weight;</code>时，编译器在计算机内存中为变量 weight 预留的空间，然后在执行这行代码时，把值存储在之前预留的位置。可以给 weight 赋不同的值，这就是 weight 之所以被称为变量的原因。</p><p><strong>注意：</strong></p><ul><li><p>该行表达式将值从右侧赋到左侧。a = (c=(b= 1 + 5));</p></li><li><p>该语句以分号结尾。</p></li><li><p><code>=</code> 在计算机中不是相等的意思，而是赋值。我们在读 <code>weight = 160; </code>时，我们应该这么读：“将 160 赋给 weight”</p></li><li><p><code>==</code>表示相等</p></li></ul><h4 id="9-初始化">9. 初始化</h4><p>没有默认值并且尚未在程序中被赋值的变量是未初始化的（uninitialized）。</p><p>我们可以用赋值的办法给变量赋初值，但还有更简洁的做法：在变量声明中加入初始值。</p><p>例如示例中的 <code>int height = 180</code>数值 180 就是一个<strong>初始化式</strong>（initializer）。</p><p>同一个声明中可以对任意数量的变量进行初始化。如：</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">15</span>, c = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><p>上述每个变量都拥有属于自己的初始化式。接下来的例子，只有 c 有初始化式，a，b没有。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a, b, c = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><h2 id="数据的表现形式及其运算">数据的表现形式及其运算</h2><h3 id="1-常量">1. 常量</h3><blockquote><p>程序运行过程中不能被改变的量</p></blockquote><h4 id="整型常量">- 整型常量</h4><blockquote><p>整数常量：在程序中以文本形式出现的数，而不是读，或计算出来的数。</p><p>C语言允许用 <strong>十进制</strong>（基数为 10），<strong>八进制</strong>（基数为 8），<strong>十六进制</strong>（基数为 16）的形式书写整数常量</p></blockquote><h5 id="8-进制-与-16-进制">8 进制 与 16 进制</h5><blockquote><p>8 进制数是用数字 0 ~ 7 书写的。八进制的每一位表示一个 8 的幂（这就如同 10 进制每一位表示 10 的幂一样）。因此，八进制数 237 表示成 10 进制数就是 2 * 8^2 + 3 * 8^1 + 7 * 8^0 = 128 + 24 + 7 = 159</p><p>16 进制数使用数字 0 ~ 9 加上字符 A ~ F 书写的，其中字符 A ~ F 表示 10 ~ 15 的数。16进制数每一位表示一个 16 的幂，16进制数 1AF 的十进制数值是 1 x 16^2 + 10 * 16^1 + 15 * 16^0 = 256 + 160 + 15 = 431</p></blockquote><ul><li><p><strong>十进制</strong>常量包含 0 ~ 9 的数字，但是不能以 0 开头</p><p>1525532767</p></li><li><p><strong>八进制</strong>常量包含 0 ~ 7 的数字，必须要以 0 开头</p><p>0170377077777</p></li><li><p><strong>十六进制</strong>常量包含 0 ~ 9 的数字 和 A ~ F 的字母，总是以 0x 开头</p><p>0xf0xff0x7fff</p><p>十六进制常量中的字母可以是大写也可以是小写</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br><span class="hljs-type">int</span> x = <span class="hljs-number">100</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;decimal = %doctonary = %ohexadecimal = %x \n&quot;</span>, x, x, x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;decimal = %doctonary = %#ohexadecimal = %#x \n&quot;</span>, x, x, x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">decimal = <span class="hljs-number">100</span>   octonary = <span class="hljs-number">144</span>  hexadecimal = <span class="hljs-number">64</span><br>decimal = <span class="hljs-number">100</span>   octonary = <span class="hljs-number">0144</span> hexadecimal = <span class="hljs-number">0x64</span><br></code></pre></td></tr></table></figure><p><strong>八进制与十六进制只是书写数的方式，他们不会对数的实际存储方式产生影响</strong>（<strong>整数都是以二进制形式存储的</strong>）。任何时候都可以从一种书写方式切换的另一种，甚至可以混合使用：10 + 015 + 0x20 = 55 。八进制和十六进制更适合底层程序的编写</p><h4 id="实型常量（浮点常量）">- 实型常量（浮点常量）</h4><blockquote><p>浮点常量必须包含<strong>小数点或指数</strong></p><ol><li>十进制小数形式</li><li>指数形式：由于在计算机输入或输出时无法表示上角或下角，故规定以字母e或E代表以10为底的指数。但应注意: e或E之前必须有数字，且e或E后面必须为整数, 可选符号 + 或 - 出现在 字母e（E）的后面。如不能写成e4，12e2.5。</li></ol></blockquote><blockquote><p>浮点常量可以有多种写法。例如，下面这些写法都表示数 57.0<br>57.0 || 57.||57.0e0 ||5.7e1 ||5.7e+1 (5.7<em>10^1)<br>.57e2 (0.57</em>10^2) ||570.e-1（570*10^-1）</p></blockquote><p><strong>默认情况下，浮点常量都以双精度的形式存储</strong>。<u>换句话说，当 C语言的编译器在程序中发现常量 57.0 时，它会安排数据以 double 类型变量的格式存储在内存中。<br></u><br>如果只需要单精度，可以在常量末尾加上 <code>F</code>或<code>f</code>（如 57.0F）；如果想以 long double 格式存储，在常量尾加上 <code>L</code>或 <code>l</code>(如 57.0L) - [强制转换]</p><h4 id="字符常量">- 字符常量</h4><blockquote><p>普通字符(ASCII码表)、转义字符、字符串常量、符号常量</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRICE 30  <span class="hljs-comment">// 符号常量，不占内存！</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> num,total; <br>num=<span class="hljs-number">10</span>;<br>total=num* PRICE;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;total=%d\n&quot;</span>,total);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-变量">2. 变量</h3><blockquote><p>先定义再使用 e.g int a = 3;</p></blockquote><p><img src="/2022/03/02/c-summary/var_img.png" alt="变量图示"></p><h4 id="整数类型">整数类型</h4><h5 id="有符号整数和无符号整数">有符号整数和无符号整数</h5><blockquote><p><strong>有符号整数</strong>如果为<strong>零或正数</strong>，那么最左边的位（符号位，只表示符号，不表示数值）为 <strong>0</strong> ；如果为<strong>负数</strong>，则符号位为 <strong>1</strong>。如：最大的 16 位整数（2个字节）的二进制表示形式是 01111111 11111111，对应的数值是 32767（即：2^15 - 1）</p><p><strong>无符号整数</strong> 不带符号位（最左边的位是数值的一部分）。因此，最大的 16 位整数的二进制表示形式是：11111111 11111111（即：2^16 - 1）</p><p>默认情况下，C语言中的整型变量都是有符号的，也就是说最左位保留符号位。若要告诉编译器变量没有符号位，需要把他声明成 unsigned 类型。</p></blockquote><h5 id="整数的类型">整数的类型</h5><blockquote><p>short int</p><p>unsigned short int</p><p>int</p><p>unsigned int</p><p>long int</p><p>unsigned long int</p></blockquote><p><strong>整数的类型归根结底只有这 6 种，其他组合都是上述某种类型的同义词。</strong></p><p>例如：long signed int 与 long int 是一样的；unsigned short int 与 short unsigned  int 是一样的</p><hr><p>16位，32位，64位机器的整数类型都各有些不同</p><p><strong>32位机器整数类型</strong><br><img src="/2022/03/02/c-summary/int_data.png" alt></p><blockquote><p>32位机器上，int 与 long的大小是一样的，都是 4 个字节。<br>16位机器上，int 与 short 大小是一样的，都是 2 个字节。<br>64位机器上，与 32 位机器不同的是，long 是 8 个字节。</p></blockquote><p>但是，上述所说的规律并不是 C标准规定的，会随着编译器的不同而不同。可以检查头文件<code>&lt;limits.h&gt;</code>，来查看每种整数类型的最大值和最小值。</p><h5 id="读写整数">读写整数</h5><p>读写<strong>无符号整数</strong>：</p><p><code>unsigned int a</code>;</p><ul><li><p><strong>十进制</strong>：</p><p><code>scanf(&quot;%u&quot;, &amp;a);</code><br><code>printf(&quot;%u&quot;, a);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">思考以下问题：<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a = <span class="hljs-number">-1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u&quot;</span>,a);<br><br><span class="hljs-comment">//为什么输出的结果是4294967295？</span><br></code></pre></td></tr></table></figure><blockquote><p>C语言中printf(“%u”)表示按无符号数形式输出一个整数。<br><strong>现在的机器一般为32位或64位机，整数存储占4个字节，一个字节8位，共计32位。</strong><br>整数在计算机中以补码形式存储，-1的补码为32个1组成的二进制数，按无符号数输出这个二进制数，就是2^32-1=4294967295。<br>由于采用补码表示整数，计算机本身不关心整数是正数还是负数，统一按无符号数对待。具体输出时，显示为什么数，计算机按编程者的格式要求进行处理输出。如32个1组成的二进制数，按%d输出就是-1，按无符号输出就是4294967295。<br>在计算机中，可以区分正负的类型，称为有符号类型（signed），无正负区分的类型，称为无符号类型（unsigned）。有符号类型数据的最高位表示符号，1表示正，0表示负。<br>%u是输出无符号十进制整数。整数占4个字节，-1的十六进制为0xFFFFFFFF，如果把它看成无符号整数，就是十进制的4294967295。</p></blockquote></li><li><p><strong>八进制</strong></p><p><code>scanf(&quot;%o&quot;, &amp;a);</code></p><p><code>printf(&quot;%o&quot;, a);</code></p></li><li><p><strong>十六进制</strong></p><p><code>scanf(&quot;%x&quot;, &amp;a);</code></p><p><code>printf(&quot;%x&quot;, a);</code></p></li></ul><p>读写**短整型*数：在 d，u，o，x 前加上 h</p><p><code>short b</code></p><ul><li><p><code>scanf(&quot;%hd&quot;, &amp;b);</code></p><p><code>printf(&quot;%hd&quot;, b);</code></p></li></ul><p>读写<strong>长整数</strong>：在 d，u，o，x 前加上 l</p><p><code>long c</code></p><ul><li><p><code>scanf(&quot;%ld&quot;, &amp;c);</code></p><p><code>printf(&quot;%ld&quot;, c);</code></p></li></ul><p>读写<strong>长长整数</strong>: 在 d，u，o，x 前加上 ll</p><p><code>long long int d</code></p><ul><li><p><code>scanf(&quot;%lld&quot;, &amp;d);</code></p><p><code>printf(&quot;%lld&quot;, d);</code></p></li></ul><h4 id="浮点类型">浮点类型</h4><hr><p>C语言提供了三种浮点类型，对应着不同的浮点格式：</p><ul><li><code>float</code>:单精度浮点数</li><li><code>double</code>：双精度浮点数</li><li><code>long double</code>：扩展精度浮点数</li></ul><p>通常我们用到的是 double, float的精度是最低的。<br><img src="/2022/03/02/c-summary/16459722831143.jpg" alt></p><h4 id="字符类型">字符类型</h4><hr><p>字符类型（字符型）：<code>char</code> 。</p><p>char 类型的值可以根据计算机的不同而不同，因为不同的计算机可能会有不同的字符集。</p><blockquote><p><strong>字符集</strong>：当今最常用的字符集是 ASCII （美国信息交换标准码）字符集。</p></blockquote><p><img src="https://hairrrrr.github.io/assets/2020-11-30-6.jpg" alt="ASCII码表"></p><h4 id="字符操作">字符操作</h4><p><strong>C语言把字符当作小整数进行处理</strong>。</p><p>所有字符都是以二进制形式进行编码的。</p><p>在标准的 ASCII 码中，字符的取值范围是 00000000 ~ 01111111，可以看成是 0 ~ 127 。例如，字符 ‘A’ 的值是 65，‘a’ 的值是 97，‘0’ 的值是48，’  ’ (Space)的值是 32 。</p><p>C语言中，字符和整数的关联是很强的，<strong>字符常量事实上是 int 类型而非 char 类型</strong>。</p><p>请看下面的例子，你会更深的理解字符型与整型的关联（字符集位ASCII）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> ch;<br><span class="hljs-type">int</span> i;<br><br>i = <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">// i is now 97</span><br>ch = <span class="hljs-number">65</span>;<span class="hljs-comment">//&#x27;ch&#x27; is now &#x27;A&#x27;</span><br>ch = ch + <span class="hljs-number">1</span>;<span class="hljs-comment">//&#x27;ch&#x27; now is &#x27;B&#x27;</span><br></code></pre></td></tr></table></figure><p>因此，字符就有了数的一些特征。比如可以像数一样比较，可以当作条件应用于 if语句，for循环。这是一个很便利的事情。</p><p>但是，以数的形式处理字符可能降低程序的可移植性（不同机器使用的字符集不同） 和 导致编译器无法检查出来的多种编程错误（‘a’ + ‘b’ * ‘c’ 这类没有意义的表达式等）。</p><h4 id="有符号字符-和-无符号字符">有符号字符 和 无符号字符</h4><p><strong>有符号字符</strong><code>signed char</code>：取值范围：-128 ~ 127</p><p><strong>无符号字符</strong><code>unsigned char</code>: 取值范围：0 ~ 255</p><p>可移植性技巧：不要假设 char 类型默认为 signed 或 unsigned 。如果有区别，用 signed char 和 unsigned char 代替 char 。</p><h3 id="3-转义字符">3.转义字符</h3><p><strong>字符转义序列</strong>（粗体比较常用，需要注意）</p><table><thead><tr><th>名称</th><th>转义序列</th><th>名称</th><th>转义序列</th></tr></thead><tbody><tr><td><strong>换行符</strong></td><td>\n</td><td>退格</td><td>\b</td></tr><tr><td><strong>水平制表符</strong></td><td>\t</td><td>垂直制表符</td><td>\v</td></tr><tr><td><strong>单引号</strong></td><td>\’</td><td>换页符</td><td>\f</td></tr><tr><td><strong>双引号</strong></td><td>\&quot;</td><td>问号</td><td>\?</td></tr><tr><td><strong>回车符</strong></td><td>\r</td><td>报警（响铃）符</td><td>\a</td></tr><tr><td><strong>反斜杠</strong></td><td>\\</td><td></td><td></td></tr></tbody></table><h2 id="运算符和表达式">运算符和表达式</h2><h3 id="一-算术运算符">一 算术运算符</h3><h4 id="1-概念">1.概念</h4><table><thead><tr><th>一元运算符（只需要 1 个操作数）</th></tr></thead><tbody><tr><td>+   一元正号运算符</td></tr><tr><td>-    一元负号运算符</td></tr></tbody></table><p>​</p><p><strong>二元运算符</strong></p><table><thead><tr><th>加法类</th><th>乘法类</th></tr></thead><tbody><tr><td>+    加法运算符</td><td>*    乘法运算符</td></tr><tr><td>-     减法运算符</td><td>/    除法运算符</td></tr><tr><td></td><td>%   求余运算符</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li><p>int 型与 float 型混合在一起时，运算结果是 float 型。</p><p>比如，9 + 2.5f 的值为 11.5；6.7f / 2 的值为 3.35。</p></li><li><p>运算符 <code>/</code>：当两个操作数都是整型时，结果会<strong>向下取整</strong>。如，1 / 2 的值是 0，而不是 0.5 。</p></li><li><p>运算符 <code>%</code>要求两个操作数都是<strong>整型</strong>。</p></li><li><p>把 0 作为 <code>/</code> 或 <code>%</code> 的右操作数会导致未定义行为 &gt; error。</p></li><li><p>当运算符 <code>/</code> 和 <code>%</code> 用于负操作数时，其结果难以确定。</p></li></ul><h4 id="2-运算符的优先级和结合性">2. 运算符的优先级和结合性</h4><p>当表达式包含多个运算符时，其含义可能不是一目了然的。我们的解决方法是：</p><ul><li>用括号进行分组</li><li>了解运算符的优先级和结合性</li></ul><h5 id="运算符优先级">运算符优先级</h5><p>（operator precedence）</p><table><thead><tr><th>最高优先级</th><th>+</th><th>-</th><th>（一元运算符）</th></tr></thead><tbody><tr><td>最低优先级</td><td>*</td><td>/</td><td>%</td></tr><tr><td></td><td>+</td><td>-</td><td>（二元运算符）</td></tr></tbody></table><p><strong>例 1-1：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">i + j * k 等价于 i + (j * k)<br>-i + -j 等价于 (-i) + (-j)<br></code></pre></td></tr></table></figure><br><h5 id="运算符的结合性">运算符的结合性</h5><p>当表达式包含两个或更多相同优先级的运算符时，仅有运算符优先级规则是不够的。这种情况下，运算符的<strong>结合性</strong>（associativity）开始发挥作用。</p><blockquote><p>如果运算符是从左向右开始结合的，那么称这种运算符是左结合的。</p></blockquote><p>二元运算符即：<code>*,/,%,+,-</code>都是左结合的。所以：</p><p><strong>例 1-2:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">i - j - k 等价于 (i - j) - k<br></code></pre></td></tr></table></figure><p>运算符是右结合的，如一元运算符：<code>+,-</code>。</p><p><strong>例 1-3：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">- + i 等价于 -(+i)<br></code></pre></td></tr></table></figure><h4 id="3-总结">3.总结</h4><blockquote><p>在许多语言（特别是 C 语言）中，优先级和结合性规则都是十分重要的。然而 C 语言的运算符太多了（差不多 50 种）。<strong>为了自己和他人理解代码的方便，请最好加上足够多的圆括号。</strong></p></blockquote><h3 id="二-赋值运算符">二 赋值运算符</h3><blockquote><p>求出表达式的值后往往需要将其存储在变量中，以便将来使用。C语言的 = （简单赋值 simple assignment）运算符可以用于此目的。为了更新已经存储在变量中的值，C语言还提供了一种复合赋值（compound assignment）。</p></blockquote><h4 id="1-简单赋值">1. 简单赋值</h4><p>表达式 <code>v = e</code>的赋值效果是求出表达式 e 的值，然后将此值赋值给 v。</p><p><strong>例 2-1：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">i = <span class="hljs-number">5</span>;<span class="hljs-comment">// i is now 5</span><br>j = i;<span class="hljs-comment">// j is now 5</span><br>k = <span class="hljs-number">10</span> * i + j;<span class="hljs-comment">// k is now 55</span><br></code></pre></td></tr></table></figure><p>如果 v 与 e 的类型不同，那么赋值运算发生时会将 e 的值转化为 v 的类型：</p><p><strong>例 2-2：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i;<br><span class="hljs-type">double</span> j;<br>i = <span class="hljs-number">72.99f</span>;<span class="hljs-comment">// i is now 72</span><br>j = <span class="hljs-number">136</span>;<span class="hljs-comment">// f is now 136.0 </span><br></code></pre></td></tr></table></figure><p>在很多编程语言中，赋值是<strong>语句</strong>；然而在 C语言中，赋值就像 + 那样是<strong>运算符</strong>。</p><p>既然赋值是运算符，那么多个赋值语句可以串联在一起：</p><p><strong>例 2-3：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">i = j = k = m = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p><strong>运算符 = 是右结合的</strong>，所以，上面的语句等价于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">i = (j = (k = (m = <span class="hljs-number">0</span>)));<br></code></pre></td></tr></table></figure><p>作用是先将 0 赋值给 m，再将 m 赋值给 k，再将 k 赋值给 j，再将 j 赋值给 i 。</p><h6 id="注意-span-class-emoji-alias-warning-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-26a0-png-v8-⚠-span">! 注意 <span class="emoji" alias="warning" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8">⚠</span></h6><p>因为赋值运算符存在<strong>类型转换</strong>，串在一起赋值运算的结果可能不是预期的结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i;<br><span class="hljs-type">float</span> j;<br><br>j = i = <span class="hljs-number">33.3f</span>;<br><span class="hljs-comment">//先将 33 赋值给 i，然后将 33.0 赋值给 j</span><br></code></pre></td></tr></table></figure><h4 id="2-左值">2. 左值</h4><p>赋值运算要求它的左操作数必须是<strong>左值</strong>（lvalue）。左值表示在计算机中的存储对象，而不是常量或计算的结果。<strong>左值是变量。</strong></p><p><strong>例 2-4：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">12</span> = i;<br>i + j = <span class="hljs-number">0</span>;<br>-i = j;<br></code></pre></td></tr></table></figure><p>以上三种表达式都是错误的。</p><h4 id="3-复合赋值">3. 复合赋值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">i = i + <span class="hljs-number">2</span>;<br><span class="hljs-comment">//等同于</span><br>i += <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>上面的例子中 += 就是一种符合运算符，表示：将自身表示的数增加 2 后再赋值给自己。</p><br><p>与加法相似，所有赋值运算符的工作原理大体相同。</p><blockquote><p><code>+=</code></p><p><code>-=</code></p><p><code>*=</code></p><p><code>/=</code></p><p><code>%=</code></p></blockquote><p><strong>注意：</strong></p><ol><li><p><code>i *= j + k</code> 和 <code>i = i * j + k</code> 是不一样的。</p></li><li><p>使用复合赋值运算符时，注意不要交换组成运算符的两个字符的位置。如：</p><p><code>i += j</code>写成了<code>i =+ j</code> 后者等价于：<code>i = (+j)</code></p></li><li><p>复合运算符有着和 <code>=</code>运算符一样的特性。它们也是右结合的，所以：<br><code>i += j += k</code>等价于<code>i += (j += k)</code></p></li></ol><h4 id="4-自增运算符和自减运算符-重点！">4. 自增运算符和自减运算符(重点！)</h4><blockquote><p><code>++</code></p><p><code>--</code></p></blockquote><p>“自增”（加1）和“自减”（减1）也可以通过下面的方式完成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">i = i + <span class="hljs-number">1</span>;<br>j = j - <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>复合赋值运算符可以简化上面的语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">i += <span class="hljs-number">1</span>;<br>j -= <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>而 C语言 允许用 ++ 和 – 运算符将这些语句缩的更短。比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">i++;<br>j--;<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">++i;<br>--j;<br></code></pre></td></tr></table></figure><p>这两种形式的写法的意义不同的：</p><ul><li><p><code>++i</code> （前缀（prefix）自增），意味着“立即自增 1 ”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ++i);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p><code>i++</code>（后缀（postfix）自增），意味着“先使用 i 的原始值，稍后再自增”。稍后是多久？C语言标准没有给出精确的时间，但是可以放心的假设 i 再下一条语句执行之前进行自增。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i++);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li></ul><p><code>--</code>运算符具有相同的特性。</p><blockquote><p>后缀的 ++ 和 – 比一元的正号，负号优先级高，而且都是左结合的。</p><p>前缀的 ++ 和 – 与一元的正号，负号优先级相同，并且是右结合的。</p></blockquote><p>比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, -i++);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);<br>&#125;<br><span class="hljs-comment">//输出：</span><br><span class="hljs-number">-1</span><br> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><blockquote><p>建议谨慎使用++和–运算符，只用最简单的形式，即i++,i–。而且把它们作为单独的表达式，而不要在一个复杂的表达式中使用++或–运算符。</p></blockquote><h4 id="5-表达式求值">5.表达式求值</h4><p><strong>部分C语言运算符表</strong></p><table><thead><tr><th>优先级</th><th>类型名称</th><th>符号</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>（后缀）自增</td><td>++</td><td>左结合</td></tr><tr><td></td><td>（后缀）自减</td><td>- -</td><td></td></tr><tr><td>2</td><td>（前缀）自增</td><td>++</td><td>右结合</td></tr><tr><td></td><td>（前缀）自减</td><td>- -</td><td></td></tr><tr><td></td><td>一元正号</td><td>+</td><td></td></tr><tr><td></td><td>一元符号</td><td>-</td><td></td></tr><tr><td>3</td><td>乘法类</td><td><code>* / %</code></td><td>左结合</td></tr><tr><td>4</td><td>加法类</td><td><code>+ -</code></td><td>左结合</td></tr><tr><td>5</td><td>赋值</td><td><code>= *= /= -=  +=</code></td><td>右结合</td></tr></tbody></table><p>能理解下面这个表达式的意义，就算掌握了这一部分的表达式求值规则：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">a = b += c++ - d + --e / -f<br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">a = ( b += ( (c++) - d + (--e) / (-f) ) )<br></code></pre></td></tr></table></figure><h5 id="子表达式的求值顺序">子表达式的求值顺序</h5><p>C语言没有定义子表达式的求值顺序（除了含有 逻辑与，逻辑或 或 逗号运算符的表达式（后面会讲））。</p><p>但是不管子表达式的计算顺序如何，大多数表达式都有相同的值。但是，当子表达式改变了某个操作数的值时，产生的值就可能不一致了。思考下面的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">a = <span class="hljs-number">5</span>;<br>c = (b = a + <span class="hljs-number">2</span>) + (a = <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>第二条语句的执行结果是未定义的。对大多数编译器而言，c 的值是 6 或者 2。取决于 子表达式 b = a + 2 和 a = 1 的求值顺序。</p><p>像上例那样，<strong>在表达式中，既在某处访问变量的值，又在别处修改它的值是不可取的。</strong></p><p>为了避免出现此类情况，我们可以将子表达式分离：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">a = <span class="hljs-number">5</span>;<br>b = a + <span class="hljs-number">2</span>;<br>a = <span class="hljs-number">1</span>;<br>c = b - a;<br></code></pre></td></tr></table></figure><p>执行完这些语句后，c 的值将始终是 6</p><p>除此之外，自增自减运算符也要小心使用。如下例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">i = <span class="hljs-number">2</span>;<br>j = i * i++;<br></code></pre></td></tr></table></figure><p>你觉得 printf(“%d”,j)的值是什么呢 <span class="emoji" alias="question" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8">❓</span></p><p><img src="/2022/03/02/c-summary/16461962791405.jpg" alt></p><h4 id="6-不同类型数据间的混合运算">6.不同类型数据间的混合运算</h4><p>如果一个运算符两侧的数据类型不同，则先自动进行类型转换，使二者成为同一种类型，然后进行运算。整型、实型、字符型数据间可以进行混合运算。规律为:</p><blockquote><ol><li>+、-、*、/运算的两个数中有一个数为float或double型，结果是double型，因为系统将所有float型数据都先转换为double型，然后进行运算。</li><li>如果int型与float或double型数据进行运算，先把int型和float型数据转换为double型，然后进行运算，结果是double型。</li><li>字符(char)型数据与整型数据进行运算，就是把字符的ASCII代码与整型数据进行运算。如果字符型数据与实型数据进行运算，则将字符的ASCII代码转换为double型数据，然后进行运算。</li></ol></blockquote><h3 id="三-逻辑运算符">三 逻辑运算符</h3><p><img src="/2022/03/02/c-summary/logical_op.png" alt="逻辑运算符运算说明"></p><h4 id="逻辑运算的结果">逻辑运算的结果</h4><p>在编程中，我们一般将零值称为“假”，将非零值称为“真”。逻辑运算的结果也只有“真”和“假”，“真”对应的值为 1，“假”对应的值为 0。</p><ul><li>与运算(&amp;&amp;)<br>参与运算的两个表达式都为真时，结果才为真，否则为假。例如：</li></ul><blockquote><p>5&amp;&amp;0<br>5为真，0为假，相与的结果为假，也就是 0。</p></blockquote><blockquote><p>(5&gt;0) &amp;&amp; (4&gt;2)<br>5&gt;0 的结果是1，为真，4&gt;2结果是1，也为真，所以相与的结果为真，也就是1。</p></blockquote><ul><li>或运算(||)<br>参与运算的两个表达式只要有一个为真，结果就为真；两个表达式都为假时结果才为假。例如：</li></ul><blockquote><p>10 || 0<br>10为真，0为假，相或的结果为真，也就是 1。</p></blockquote><blockquote><p>(5&gt;0) || (5&gt;8)<br>5&gt;0 的结果是1，为真，5&gt;8 的结果是0，为假，所以相或的结果为真，也就是1。</p></blockquote><ul><li>非运算(!)<br>参与运算的表达式为真时，结果为假；参与运算的表达式为假时，结果为真。例如：</li></ul><blockquote><p>!0<br>0 为假，非运算的结果为真，也就是 1。</p></blockquote><blockquote><p>!(5&gt;0)<br>5&gt;0 的结果是1，为真，非运算的结果为假，也就是 0。</p></blockquote><p>输出逻辑运算的结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">10</span>, c = <span class="hljs-number">-6</span>;<br>    <span class="hljs-type">int</span> result_1 = a&amp;&amp;b, result_2 = c||<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, result_1, !c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, <span class="hljs-number">9</span>&amp;&amp;<span class="hljs-number">0</span>, result_2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, b||<span class="hljs-number">100</span>, <span class="hljs-number">0</span>&amp;&amp;<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>运行结果：<br>0, 0<br>0, 1<br>1, 0</p></blockquote><h2 id="C语句">C语句</h2><blockquote><ol><li>控制语句</li><li>函数调用语句</li><li>表达式语句</li><li>空语句</li><li>符合语句（语句块）</li></ol></blockquote><h2 id="数据的输入输出">数据的输入输出</h2><p><img src="/2022/03/02/c-summary/input_output.png" alt="有关输入输出的概念"></p><h3 id="printf-函数">printf() 函数</h3><p><code>printf()</code>函数打印数据的指令要与待打印数据的类型相匹配。例如，打印整数时使用 <code>%d</code>，打印字符时使用 <code>%c</code> 。这些符号被称为<strong>转换说明</strong>（conversion specification）,它们指定了如何把数据（以2进制形式）转换成可显示的形式。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am %d years old&quot;</span>, <span class="hljs-number">18</span>);<br></code></pre></td></tr></table></figure><p><img src="https://hairrrrr.github.io/assets/2020-11-30-2.png" alt></p><p>这是 printf（）的格式：</p><p><code>printf(格式字符串，待打印项1，待打印项2,...);</code></p><p><strong>待打印项</strong>都是要打印的的项。它们可以是<strong>变量，常量</strong>，甚至是在打印之前计算的<strong>表达式</strong>。上例中，只有一个待打印项： 18 。</p><p><strong>格式字符串</strong>包含两种不同信息：</p><ul><li><strong>普通字符</strong>：以字符串中出现的形式打印出来。上例中，“I am” 与 &quot; years old&quot; 为普通字符</li><li><strong>转换说明</strong>：用待打印项的值来替换。上例中，“%d” 为转换说明</li></ul><hr><h4 id="span-class-emoji-alias-warning-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-26a0-png-v8-⚠-span"><span class="emoji" alias="warning" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8">⚠</span></h4><p>C语言的编译器不会检测格式字符串中转换说明中的数量与待打印项总个数是否相匹配。</p><p><strong>1.缺少参数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i); <span class="hljs-comment">// wrong</span><br></code></pre></td></tr></table></figure><p>printf 会正确显示 i 的值，然后显示一个无意义的整数值。</p><p><strong>2.参数过多</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i, j);<span class="hljs-comment">// wrong</span><br></code></pre></td></tr></table></figure><p>而在这种情况下，printf 函数会显示变量 i 的值，但是不会显示变量 j 的值</p><hr><h4 id="printf（）-转换说明">printf（） 转换说明</h4><p><img src="https://hairrrrr.github.io/assets/2020-11-30-3.png" alt></p><ul><li><p>转换说明符</p><table><thead><tr><th>转换说明符</th><th>含义</th></tr></thead><tbody><tr><td>d，i</td><td>把 int 类型转换为 十进制形式，多用%d</td></tr><tr><td>o，u，x，X</td><td>把无符号整型转换为八进制（o），十进制（u），十六进制形式（x，X）。</td></tr><tr><td>f，F （F C99）</td><td>把 double 类型转换为 十进制形式，并把小数点放置在正确位置上。如果没有指定精度，那么小数点后显示6个数字。</td></tr><tr><td>e，E</td><td>把  double 类型转换为 科学计数法形式。如果没有指定精度，那么小数点后显示6个数字。</td></tr><tr><td>g，G</td><td>把double 类型转换为 f 形式或 e 形式。当数值的指数部分小于 -4，或大于等于精度时，会选择以 e 的形式显示。尾部的 0 不显示（除非用#标志），且小数点后跟有数字才会显示出来。</td></tr><tr><td>a，A （C99）</td><td>把 double 类型转换为十六进制科学计数法（p计数法）。</td></tr><tr><td>c</td><td>以字符形式输出，只输出一个字符。</td></tr><tr><td>s</td><td>写出由实参指向的字符串。</td></tr><tr><td>%</td><td>百分号 %</td></tr></tbody></table><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i\n&quot;</span>, <span class="hljs-number">123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-number">123</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%o\n&quot;</span>, <span class="hljs-number">123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u\n&quot;</span>, <span class="hljs-number">123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, <span class="hljs-number">123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%X\n&quot;</span>, <span class="hljs-number">123</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>, <span class="hljs-number">123.0</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%e\n&quot;</span>, <span class="hljs-number">123.0</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%g\n&quot;</span>, <span class="hljs-number">123.0</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%a\n&quot;</span>, <span class="hljs-number">123</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>, <span class="hljs-number">65</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%%\n&quot;</span>);<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">123</span><br><span class="hljs-number">123</span><br><br><span class="hljs-number">173</span><br><span class="hljs-number">123</span><br><span class="hljs-number">7b</span><br><span class="hljs-number">7B</span><br><br><span class="hljs-number">123.000000</span><br><br><span class="hljs-number">1.230000e+02</span><br><br><span class="hljs-number">123</span><br><br><span class="hljs-number">0x1</span>.e13430000007bp<span class="hljs-number">-1021</span><br><br>A<br><br><span class="hljs-number">123</span><br> <br>%<br></code></pre></td></tr></table></figure></li><li><p><strong>标志</strong>（可选，允许出现多于一个）</p></li></ul><table><thead><tr><th>-</th><th>字段内左对齐（默认右对齐）</th></tr></thead><tbody><tr><td>+</td><td>在打印的数前加上 + 或 - （通常只有负数前面附上减号）<em>例1</em></td></tr><tr><td>空格</td><td>在打印的非负数前前面加空格（ + 标志优先于空格标志）<em>例2</em></td></tr><tr><td>#</td><td>对象：八进制数，十六进制数，以g/G 转换输出的数 <em>例3</em></td></tr><tr><td>0</td><td>用前导 0 在字段宽度内对输出进行填充。如果转换格式为d，i，o，u，x（X），而且指定了精度，可以忽略 0 <em>例4</em></td></tr></tbody></table><hr><p>例 1：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-number">123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-number">-123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%+d\n&quot;</span>, <span class="hljs-number">123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%+d\n&quot;</span>, <span class="hljs-number">-123</span>);<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/2022/03/02/c-summary/16461965490086.jpg" alt></p><p>例 2：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;% d\n&quot;</span>, <span class="hljs-number">123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;% d\n&quot;</span>, <span class="hljs-number">-123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;% +d\n&quot;</span>, <span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/2022/03/02/c-summary/16461966510848.jpg" alt></p><p><img src="/2022/03/02/c-summary/16461966314693.jpg" alt></p><p>例 3：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%o\n&quot;</span>, <span class="hljs-number">0123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, <span class="hljs-number">0x123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#o\n&quot;</span>, <span class="hljs-number">0123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#x\n&quot;</span>, <span class="hljs-number">0x123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#g\n&quot;</span>, <span class="hljs-number">123.0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%g\n&quot;</span>, <span class="hljs-number">123.0</span>);<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/03/02/c-summary/16461967325753.jpg" alt></p><p>例 4：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d\n&quot;</span>, <span class="hljs-number">123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d\n&quot;</span>, <span class="hljs-number">123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5.3d\n&quot;</span>, <span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/03/02/c-summary/16461967783046.jpg" alt></p><ul><li><p><strong>最小字段宽度</strong>（可选）</p><blockquote><p>如果数据项太小无法达到这个宽度，那么会对字段进行填充。（默认情况下会在数据项左侧添加空格，从而使字段宽度内右对齐）。</p><p>如果数据项过大以至于超过了这个宽度，那么会完整的显示数据项。</p></blockquote></li></ul><p>例 5：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d\n&quot;</span>, <span class="hljs-number">123</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2d\n&quot;</span>, <span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2022/03/02/c-summary/16461969051459.jpg" alt></p><ul><li><p><strong>精度</strong>（可选项）</p><blockquote><p>如果转换说明是：</p><p>d，i，o，u，x，X 那么精度表示最少位数（如果位数不够，则添加前导 0 ）</p><p>a，A，e，E，f，F 那么精度表示小数点后的位数</p><p>g，G 那么精度表示有效数字个数</p><p>s那么精度表示最大字节数</p><p>精度是由小数点（.）后跟一个整数,如果只有小数点，那么精度为0 。<em>例 6</em></p></blockquote><p>例 6：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4d\n&quot;</span>, <span class="hljs-number">123</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>, <span class="hljs-number">123.0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1f\n&quot;</span>, <span class="hljs-number">123.0</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%g\n&quot;</span>, <span class="hljs-number">123.0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.5g\n&quot;</span>, <span class="hljs-number">123.0</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2s\n&quot;</span>, <span class="hljs-string">&quot;Hello&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><p>运行结果如下：</p><p><img src="/2022/03/02/c-summary/16461971385055.jpg" alt></p><ul><li><p><strong>长度修饰符</strong>（可选）。</p><blockquote><p>长度修饰符表明待显示的数据项的长度<strong>大于或小于</strong>特定转换说明中的正常值。<em>例7</em></p></blockquote><table><thead><tr><th>长度修饰符</th><th>转换说明符</th><th>含义</th></tr></thead><tbody><tr><td>hh (C99)</td><td>d，i，o，u，x，X</td><td>signed char, unsigned char</td></tr><tr><td>h</td><td>d，i，o，u，x，X</td><td>short, unsigned short</td></tr><tr><td>l</td><td>d，i，o，u，x，X</td><td>long, unsigned long</td></tr><tr><td>ll  (C99)</td><td>d，i，o，u，x，X</td><td>long long, unsigned long long</td></tr><tr><td>L</td><td>a，A，e，E，f，F，g，G</td><td>long double</td></tr><tr><td>z (C99)</td><td>d，i，o，u，x，X</td><td>size_t</td></tr><tr><td>j (C99)</td><td>d，i，o，u，x，X</td><td>ptrdiff_t</td></tr></tbody></table><p>例 7：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#hhX\n&quot;</span>, <span class="hljs-number">0xAABBCCDDEEFF1122</span>);<span class="hljs-comment">//这是一个占用内存为 8 个字节的十六进制数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#hX\n&quot;</span>, <span class="hljs-number">0xAABBCCDDEEFF1122</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#X\n&quot;</span>, <span class="hljs-number">0xAABBCCDDEEFF1122</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#lX\n&quot;</span>, <span class="hljs-number">0xAABBCCDDEEFF1122</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#llX\n&quot;</span>, <span class="hljs-number">0xAABBCCDDEEFF1122</span>);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0X22</span><br><span class="hljs-number">0X1122</span><br><span class="hljs-number">0XEEFF1122</span><br><span class="hljs-number">0XEEFF1122</span><br><span class="hljs-number">0XAABBCCDDEEFF1122</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="print-函数运用举例">print()函数运用举例</h4><blockquote><p>给定身高体重，输出身高体重比.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> height,weight, scale;<span class="hljs-comment">//scale:比例</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入您的身高(请输入整数，厘米为单位):\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;height);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入您的体重(请输入整数，斤为单位):\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;weight);<br>    scale = height / weight;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;身高与体重的比为：%d\n&quot;</span>, weight, scale);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们发现，最终我们屏幕上看到的是引号内的内容。我们可以来看一下输出的内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">我的体重是：<span class="hljs-number">160</span>斤<br>身高与体重的比为：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>为什么 <code>180 / 160 == 1 </code>(180 / 160 的值是 1)呢？</p><p>因为 weight 和 height 都整数，它们相除结果取整数（向下取整）。</p><p>如何输出精确的结果呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> scale;<br>scale =  (<span class="hljs-type">float</span>)height / weight;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我的体重是：%d斤\n身高与体重的比为：%.3f\n&quot;</span>, weight, scale);<br></code></pre></td></tr></table></figure><hr><h3 id="scanf-函数">scanf() 函数</h3><p><img src="/2022/03/02/c-summary/scanf_function.png" alt="scanf_function"></p><p>scanf() 函数功能:</p><blockquote><p>将从键盘输入的字符转化为“输入控制符”所规定格式的数据，然后存入以输入参数的值为地址的变量中。</p></blockquote><p>scanf() 把输入的字符串转换成整数，浮点数，字符和字符串，而 printf() 正好与之相反，把整数，浮点数，字符，字符串转换成显示在屏幕上的文本。</p><p>scanf() 与 printf() 类似，也要使用 格式字符串 和 参数列表。scanf() 中的格式字符串表明字符输入流的目标数据类型。两个函数的主要区别在于参数列表中。printf() 函数使用变量，常量和表达式，而 scanf() 函数使用指向变量的指针。这里不需要了解指针，只需要记住一下简单的两条：</p><h4 id="scanf-函数的工作方法">scanf()函数的工作方法</h4><p><code>scanf</code> 函数本质上是一种 <strong>模式匹配</strong> 函数，试图把输入的字符组与转换说明相匹配。</p><p>像 <code>printf</code> 函数一样，<code>scanf</code> 函数是由格式字符串控制的。调用时，<code>scanf</code> 函数从左边开始处理字符串中的信息。对于格式串中的每一个转换说明，<code>scanf</code> 函数从输入的数据中定位适当类型的项，并且在必要时跳过空格。</p><p><u>然后，<code>scanf</code> 函数读入数据项，并且在遇到不可能属于此项的字符时停止。如果读入数据成功，那么 <code>scanf</code> 函数会继续处理格式串的剩余部分；</u> 如果某一项不能成功读入，那么 <code>scanf</code> 函数将不再查看格式串的剩余部分而立即返回。</p><p>在寻找函数的起始位置时，<code>scanf</code> 函数会忽略空白字符。</p><p>在要求读入整数时，<code>scanf</code> 函数首先寻找正号或者负号，然后读取数字直到读到一个非数字时才停止。当要求读入浮点数时， <code>scanf</code> 函数会寻找一个正号或者负号，随后是一串数字（可能含有小数点），再后是一个指数（可选）。指数由字母 <code>e</code> （或者字母 <code>E</code> ）、可选的符号和一个或者多个数字构成。</p><h4 id="何时使用">何时使用&amp;</h4><p>用 scanf 读取</p><ul><li>基本变量类型的值，在变量名前加上一个<code> &amp;</code></li><li>把字符串读入数组中，不要使用 <code>&amp;</code></li></ul><p>下面的程序演示了这两条规则：</p><p><strong>_test2.c</strong> —— 何时使用 &amp;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//scanf 的 &amp; 使用规则</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    <br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">float</span> assets;<br>    <span class="hljs-type">char</span> pets[<span class="hljs-number">30</span>];<span class="hljs-comment">//字符数组，存放字符串</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter you age, assets and you favorite pet:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %f&quot;</span>, &amp;age, &amp;assets); <span class="hljs-comment">// 这里要用 &amp;  , 字符数组不使用 &amp;</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, pets);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your age:%d\n your assets:%f\n your favorite pet:%s\n&quot;</span>,age,assets,pets);<br>      <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h4 id="span-class-emoji-alias-warning-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-26a0-png-v8-⚠-span-v2"><span class="emoji" alias="warning" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8">⚠</span></h4><p>初学者在使用 scanf 时，在应该写 &amp; 的时候容易忽略 &amp; ，所以每次使用 scanf 的时候一定要格外小心。通常情况下，必要的地方缺少 &amp; 会让程序崩溃（编译器没有警告），但是也有时候程序并不会崩溃，这时候找 bug 可能会让你头痛。</p><hr><p>scanf 的 长度修饰符 和 转换说明符 与 printf 几乎相同。主要的区别如下：</p><ul><li><p><strong>长度修饰符</strong> ：（可选项）对于 float 与 double 类型，printf() 的转换说明都用 <code>f</code>; 而对于 scanf() ，float 保持不变，double 要在 f 前加长度修饰符 l ，即：<code>lf</code>。<em>例 1</em></p><p>例 1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br><span class="hljs-type">double</span> a = <span class="hljs-number">3.0</span>;<br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>转换说明符</strong> ：</p></li></ul><p><img src="/2022/03/02/c-summary/16461982518740.jpg" alt></p><ul><li><p><strong>字符 <code>*</code></strong>：（可选项）字符 * 出现意味着<strong>赋值屏蔽</strong>（assignment suppression）: 读入此数据项，但是不会将其赋值给对象。用 * 匹配的数据项不包含在 …scanf 函数返回的计数中。<em>例 3</em></p><p>例 3：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%*d%d&quot;</span>, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>输入：<span class="hljs-number">1</span> <span class="hljs-number">2</span><br>输出：<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p><strong>最大字段宽度</strong>：（可选项）最大字段宽度限制了输入项中的字符数量。如果达到最大值，那么次数据项的转换结束。转换开始跳过的空白不计。<em>例 4</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//输入：1234 Hello</span><br><span class="hljs-comment">//先猜测一下输出</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%2d%3s&quot;</span>, &amp;a, str);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s&quot;</span>, a, str);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出：12 34</span><br></code></pre></td></tr></table></figure><p><u> <span class="emoji" alias="collision" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8">💥</span> ❗️ <span class="emoji" alias="exclamation" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span> 思考 为什么%s 只输出了 34 ？</u></p><blockquote><p><strong>scanf 在读入字符串时会跳过空白字符并开始读入第一个非空白字符，保存非空白字符直到再遇到空白字符结束。</strong></p></blockquote></li></ul><h4 id="scanf-函数在不同情况下对空白符的处理-span-class-emoji-alias-sweat-drops-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-1f4a6-png-v8-💦-span-span-class-emoji-alias-mortar-board-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-1f393-png-v8-🎓-span">scanf()函数在不同情况下对空白符的处理 <span class="emoji" alias="sweat_drops" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8">💦</span><span class="emoji" alias="mortar_board" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8">🎓</span></h4><blockquote><p>首先，要清楚一个概念：空白字符(white space)。一般，程序中所指的空白字符是指空格(space)，回车(enter)和制表符(Tab)。</p></blockquote><h5 id="1-整数-d">1. 整数%d</h5><p>对于整型数据的输入，也就是说&quot;%d&quot;类型的输入，scanf默认的分割符是所有的空白字符(空格，回车和制表符都行)。也就是说如果一个scanf函数中出现scanf(“%d%d”,&amp;a,&amp;b)，那么用任何一个空白字符来分隔两个整数a,b的值，变量a,b都可以接收到正确的输入。<strong>另外，要注意的是，scanf对于数字输入，会忽略输入数据项前面的空白字符。</strong> 具体请参看如下例题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> a,b,c;<br> <br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d\n&quot;</span>,&amp;a,&amp;b,&amp;c);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d,%d/n&quot;</span>,a,b,c);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br>=======================================<br>运行时按如下方式输入三个值：<br><span class="hljs-number">3</span>□<span class="hljs-number">4</span>□<span class="hljs-number">5</span> ↙（输入a,b,c的值）<br><span class="hljs-number">3</span>，<span class="hljs-number">4</span>，<span class="hljs-number">5</span> （<span class="hljs-built_in">printf</span>输出的a，b，c的值）<br> <br><br></code></pre></td></tr></table></figure><h4 id="scanf-函数遵循什么规则来识别整数或浮点数呢">scanf 函数遵循什么规则来识别整数或浮点数呢?</h4><p>在要读入整数时，scanf 函数首先会寻找正号或负号，然后从读入一个数字开始直到读入一个非数字为止。</p><p>当要求读入浮点数时，scanf 函数首先会寻找正号或负号（可选），然后是一串数字（可能含有小数点），再后是一个指数（可选）。指数由一个字母e，可选的符号，一个或多个数字组成。</p><p><strong>当 scanf 函数遇到一个不可能输入当前项的字符时，它会把此字符“放回原处”</strong>，以便在扫描下一项或下一次调用 scanf 时再次读入。思考下面（公认有问题的）4个数的排列：【非常重要！！！】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span><span class="hljs-number">-20.3</span><span class="hljs-number">-4.0e3</span>lol<br></code></pre></td></tr></table></figure><p>然后我们用这个 scanf 函数来读入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%f%f&quot;</span>, &amp;i, &amp;j, &amp;x, &amp;y);<br></code></pre></td></tr></table></figure><p>scanf 会如何处理这组输入呢？</p><ul><li>%d ：读入 1</li><li>%d ：读入 -20</li><li>%f ：读入 .3 (当作 0.3 处理)</li><li>%f : 将 -4.0*10^3存入变量y中，lol不处理&quot;放回原处&quot;</li></ul><hr><h5 id="2-字符串-s">2. 字符串%s</h5><p>scanf对于字符串输入的处理和对整数类似，会忽略前导的空白字符，而且默认的分隔符是所有的空白字符。但是，要注意的是，由于C语言中，没有string类型，都是用char型数组来表示。因此，scanf会为每一个输入的字符串最后加一个‘\0’。</p><p><strong>使用 %s 转换说明</strong>，scanf 会读取除了空白字符以外的所有字符。<strong>scanf 跳过空白字符并开始读入第一个非空白字符，保存非空白字符直到再遇到空白字符结束。</strong> 这意味着，scanf 最多只能读取一个单词。无法利用字段宽度使得 scanf  读取多个单词，scanf 会在字段宽度结束或遇到空白字符处停止。scanf 将字符串放入数组时，会在字符串序列末尾加上一个 <code>\0</code>。</p><h5 id="输入字符串匹配">输入字符串匹配</h5><p><code>%[集合]</code>匹配集合中的任意序列；<code>%[^集合]</code>匹配非集合中的任意序列。<em>查看以下例题</em></p><p>例 ：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br><span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<span class="hljs-comment">//字符串数组</span><br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%[123]&quot;</span>, str);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输入：123456abc123</span><br><span class="hljs-comment">//输出：123</span><br></code></pre></td></tr></table></figure>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br><span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<span class="hljs-comment">//字符串数组</span><br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%[^123]&quot;</span>, str);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输入：abc4123a</span><br><span class="hljs-comment">//输出：abc4</span><br></code></pre></td></tr></table></figure><h5 id="3-字符-c">3. 字符%c</h5><p>scanf在处理对字符数据的输入时，既不会忽略前导空白字符，默认也没有任何分隔字符。所有的字符，包括空白字符都会被当成输入字符。</p><blockquote><p>scanf 函数如果发生了 <strong>输入失败</strong>（没有字符输入）或 <strong>匹配失败</strong> （即输入字符和格式串不匹配），那么…scanf 会提前返回。返回就意味着这个 scanf 的读入结束。</p></blockquote><p>scanf 返回的又是什么呢？</p><blockquote><p>成功赋值的接收参数的数量（可以为零，在首个接收用参数赋值前匹配失败的情况下），或者若输入在首个接收用参数赋值前发生失败，则为EOF(EOF 的值是 -1)。</p></blockquote><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br><span class="hljs-type">char</span> s[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s[10]存储的值为：%s\n&quot;</span>,s);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/2022/03/02/c-summary/16461985026503.jpg" alt></p><p><strong>格式串中的普通字符</strong></p><ul><li><p><strong>空白字符</strong>：参见<a href="https://bsqqueenie.github.io/2022/03/02/c-summary/#scanf-%E5%87%BD%E6%95%B0%E5%9C%A8%E4%B8%8D%E5%90%8C%E6%83%85%E5%86%B5%E4%B8%8B%E5%AF%B9%E7%A9%BA%E7%99%BD%E7%AC%A6%E7%9A%84%E5%A4%84%E7%90%86">scanf()函数在不同情况下对空白符的处理</a></p></li><li><p><strong>非空白字符</strong>：看个程序就明白了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br><span class="hljs-type">int</span> i, j, k;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a date: &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d - %d - %d&quot;</span>, &amp;i, &amp;j, &amp;k);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;date: %d - %d - %d&quot;</span>, i, j, k);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//输入：</span><br>Enter a date:  <span class="hljs-number">2020</span>   - <span class="hljs-number">2</span><span class="hljs-number">-22</span><br><span class="hljs-comment">//输出：</span><br>date: <span class="hljs-number">2020</span> - <span class="hljs-number">2</span> - <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p><strong>空格你可以随便空，换行都可以随便换，但是一定要打 ‘’-‘’ 符号。</strong></p></li></ul><h4 id="易混淆的-printf-与-scanf">易混淆的 printf() 与 scanf()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;i);<br></code></pre></td></tr></table></figure><p>输出的并不是 i 的值 （而是 i 的地址的十进制数值）</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d, %d&quot;</span>, &amp;i, &amp;j);<br></code></pre></td></tr></table></figure><p>scanf 在第一个 %d 读入一个整数后，试图把逗号与输入流中的下一个字符相匹配，如果这个字符不是 <code>,</code>,那 scanf 就会终止操作，而不再读取变量 j 的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, &amp;i);<br></code></pre></td></tr></table></figure><p>printf 函数中经常有 <code>\n</code> ，但是如果在 scanf 格式串结尾放一个 \n 通常会引发你预期之外的问题。</p><p><strong>对于 scanf 函数来说，\n 等同于空格，那么 scanf 就会在流中寻找空白字符，但是我们上面说过，scanf 格式串中的空白字符会与 输入流中的零个或多个空白字符匹配。所以当你输入完成后按下回车，这个回车会与 scanf 中的 \n 匹配，之后你无论打多少回车都不会使 scanf 结束，除非你输入一个非空字符，使 scanf 因匹配失败而退出。</strong></p><h3 id="getchar-putchar-函数">getchar() putchar() 函数</h3><hr><blockquote><p>从键盘输入单个字符 &gt; getchar()<br>将单个字符打印到屏幕 &gt; putchar()</p></blockquote><p>例 1. 从键盘输入BOY 3个字符，然后把它们输出到屏幕。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<span class="hljs-type">char</span> a,b,c;<span class="hljs-comment">//定义字符变量a,b,c</span><br>a=getchar();<span class="hljs-comment">//从键盘输入一个字符，送给字符变量a</span><br>b=getchar();<span class="hljs-comment">//从键盘输入一个字符，送给字符变量b</span><br>c=getchar();<span class="hljs-comment">//从键盘输入一个字符，送给字符变量c</span><br><span class="hljs-built_in">putchar</span>(a); <span class="hljs-comment">//将变量a的值输出</span><br><span class="hljs-built_in">putchar</span>(b); <span class="hljs-comment">//将变量b的值输出 </span><br><span class="hljs-built_in">putchar</span>(c); <span class="hljs-comment">//将变量c的值输出</span><br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<span class="hljs-comment">//换行</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>例 2. 用getchar函数从键盘读入一个大写字母，把它转换为小写字母，然后分别用putchar、printf函数输出该小写字母。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> c1,c2;<br>c1=getchar();<span class="hljs-comment">//从键盘读入一个大写字母，赋给字符变量c1</span><br>c2=c1+<span class="hljs-number">32</span>;<span class="hljs-comment">//得到对应的小写字母的ASCII代码，放在字符变量c2中</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;大写字母: %c\n小写字母: %c\n&quot;</span>,c1,c2);<span class="hljs-comment">//输出c1,c2的值</span><br><span class="hljs-built_in">putchar</span>(c2);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><em>参考资料：《C Primer Plus》《C语言程序设计：现代方法》</em></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>用100个函数操作一个数据结构比仅用10个函数但是操作10个不同的数据结构要好。<a href="https://epigrams-on-programming.readthedocs.io/zh_CN/latest/epigrams.html">Epigrams on Programming 编程警句 </a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>课程</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高级语言程序设计</title>
    <link href="/2022/02/19/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/02/19/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1>序言</h1><p>主讲教师：白诗琦 计科系</p><p>关于本门课的所有资料将会根据上课时间更新，请各位同学根据需要自行下载！<span class="emoji" alias="yum" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">😋</span> <span class="emoji" alias="satisfied" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p><p>本门课更希望各位童鞋能够掌握学习一门新的编程语言的<strong>基本方法</strong>，并能够建立起<strong>编程思维</strong>！！！</p><h2 id="课程成绩评定办法">课程成绩评定办法</h2><h3 id="1-5学分">1.5学分</h3><blockquote><p>总评成绩=平时成绩(30%)+期中（20%）+期末成绩(50%)，其中平时成绩包括学生课堂表现（20%）、考勤（10%）。实验设计主要考查学生编程实践训练能力；期末考试主要考查学生对理论知识的掌握情况以及简单程序的编写和调试能力。</p></blockquote><h3 id="3-5学分">3.5学分</h3><blockquote><p>总评成绩=平时成绩(30%)+期中（20%）+期末成绩(50%)。其中平时成绩包括学生课堂表现、考勤和平时作业的总和；上机成绩主要考查学生实践能力（以课程设计方式进行）。期末考试采用闭卷机考的方式进行考查，题型多样化，主要考查学生对理论基础知识的掌握情况以及学生综合能力的掌握情况。</p></blockquote><h2 id="IDE的选择">IDE的选择</h2><ol><li>Win： Visual studio 2012 （<span class="emoji" alias="arrow_left" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b05.png?v8">⬅</span>考试系统用的这这个）</li><li>Mac:  Xcode gcc + sublime（个人偏好 <span class="emoji" alias="tropical_drink" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f379.png?v8">🍹</span>）</li><li>Jupyter(在线 时间成本较低 墙裂推荐<span class="emoji" alias="beers" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f37b.png?v8">🍻</span>)</li></ol><p>安装完Jupyter后在终端运行以下命令：</p><blockquote><p>打开Jupyter notebook：</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">jupyter notebook</span> <br></code></pre></td></tr></table></figure><blockquote><p>安装支持C语言的Jupyter内核：</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo pip3 <span class="hljs-keyword">install</span> jupyter-c-kernel<br></code></pre></td></tr></table></figure><blockquote><p>运行配置程序：</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo install_c_lernel</span><br></code></pre></td></tr></table></figure><h2 id="如何学习-span-class-emoji-alias-question-style-fallback-src-https-github-githubassets-com-images-icons-emoji-unicode-2753-png-v8-❓-span">如何学习<span class="emoji" alias="question" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8">❓</span></h2><ol><li>按时上课啦！</li><li>多读书多看报，课后多进行练习（最重要<span class="emoji" alias="exclamation" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span>）</li></ol><blockquote><p><a href="https://leetcode.com/">https://leetcode.com/</a></p></blockquote><ol start="3"><li>巨人的肩膀</li></ol><blockquote><p>Google Github Gitee StackOverflow 百度…</p></blockquote><p><img src="https://i.redd.it/bpmpqzsatwl21.jpg" alt="How to code fater!"></p><ol start="4"><li><a href="https://shimo.im/docs/5rk9d77m00I7meqx/%20%E3%80%8A%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1Troubleshooting%E3%80%8B%EF%BC%8C%E5%8F%AF%E5%A4%8D%E5%88%B6%E9%93%BE%E6%8E%A5%E5%90%8E%E7%94%A8%E7%9F%B3%E5%A2%A8%E6%96%87%E6%A1%A3%20App%20%E6%88%96%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%89%93%E5%BC%80">Troubleshooting</a> and Cheatsheets（ Log everything <span class="emoji" alias="exclamation" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span>）<span class="emoji" alias="arrow_left" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b05.png?v8">⬅</span> 个人报错笔记</li></ol><blockquote><p>当你试遍了所有方法去处理error，别忘了重启这个大招 <span class="emoji" alias="sweat_smile" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8">😅</span></p></blockquote><p><s>5. 了解、去尽可能使用Anaconda <span class="emoji" alias="exclamation" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">❗</span></s></p><h3 id="学习C语言的必要性">学习C语言的必要性</h3><p><a href="https://www.codeavail.com/blog/uses-of-c-programming-language/">1. C语言日常应用场景<br></a></p><blockquote><p>Mainly C programming is utilized for the Development of system software and Desktop application. Some C programming applications are given below.</p></blockquote><ul><li><p>Operating Systems<br>UNIX was the first OS developed using a high-level programming language designed in the C programming language. Later on, Microsoft Windows and different Android applications were scripted in C language.</p></li><li><p>GUI (Graphical User Interface)<br>Adobe Photoshop is one of the most popular photo editors since olden times. It was designed with the help of the C language only. Moreover, Illustrator and Adobe Premiere were also designed using C.</p></li><li><p>Embedded Systems<br>C programming is known as the optimum option for scripting applications and drivers of embedded systems because it is closely associated with machine hardware.</p></li><li><p>Google<br>Google chromium-browser and Google file system were developed with the help of C/C++. Moreover, the Google Open Source community has a huge number of projects being managed with the help of C/C++.</p></li><li><p>Compiler Design<br>One of the common uses of the C programming language was the production of compilers. Compilers for many other languages were designed by keeping in mind the relationship of C with low-level languages, making it more comfortable to be understandable by the machine. Many popular compilers were created with the help of C such as Clang C, Bloodshed Dev-C, Apple C, and MINGW.</p></li><li><p>Mozilla Firefox and Thunderbird<br>Because Mozilla Firefox and Thunderbird were open-source email client projects. Therefore, they were written in C/C++.</p></li><li><p>Gaming and Animation<br>Since the C language is comparatively faster than Python or Java, as it is compiler-based, it also gains its reputation in the gaming sector.  Some of the most simple games are coded in C languages, such as The Dino game, Tic-Tac-Toe,  The Snake game, and many more. Improving advanced versions of graphics, Doom3, and fps horror game was designed by id Software for Microsoft Windows using C in 2004.</p></li><li><p>MySQL<br>MySQL is also an open-source project utilized in Database Management Systems. It was written in C/C++.</p></li></ul><ol start="2"><li>第一门编程语言（敲门砖、基石）</li></ol><blockquote><p>学习C有助于更好的理解C++，Java，C#，Perl以及其他基于C的特性的语言。第一开始就学习其他语言的程序员往往不能很好的掌握继承自C语言的基本特性</p></blockquote><h1>课件</h1><ol><li>Chap1-程序设计和C语言 <a href="/download/slides/C_programming/Chap1.pdf">课件</a></li><li>Chap2-算法「程序设计的灵魂」<a href="/download/slides/C_programming/Chap2.pdf">课件</a></li><li>Chap3-最简单的程序设计「顺序程序设计」<a href="/download/slides/C_programming/Chap3.pdf">课件</a>  <a href="https://bsqqueenie.github.io/2022/03/02/c-summary/">C语言语法总结</a> <a href="https://www.processon.com/view/link/621f766b07912966cc49aedd">思维导图</a></li><li>Chap4-选择结构程序设计 <a href="https://bsqqueenie.github.io/2022/03/04/c-programming-chap4/">课程内容总结</a>  <a href="https://www.processon.com/view/link/622eb3d21e085307a23f5adc"> 思维导图</a></li><li>Chap5-循环结构程序设计 <a href="https://bsqqueenie.github.io/2022/03/07/c-programming-chap5/">课程内容总结</a></li><li>Chap6-数组 <a href="https://bsqqueenie.github.io/2022/03/10/c-programming-chap6/">课程内容总结</a></li><li>Chap7-函数 <a href="https://bsqqueenie.github.io/2022/03/15/c-programming-chap7/">课程内容总结</a></li><li>Chap8-指针 <a href="https://bsqqueenie.github.io/2022/04/07/c-programming-chap8/">课程内容总结</a></li><li>Chap9-结构体 <a href="https://bsqqueenie.github.io/2022/04/22/c-programming-chap9/">课程内容总结</a> <a href="https://bsqqueenie.github.io/2022/04/29/in-class-test/">课堂测试</a></li><li>Chap10-文件 <a href="/download/slides/C_programming/Chap10.pdf">课件</a> <a href="https://bsqqueenie.github.io/2022/05/09/c-programming-chap10/">课程内容总结</a></li></ol><h1>实验课相关资料</h1><ol><li><p><a href="/download/slides/C_programming/vs_c_project.pdf">如何用Visual Studio 2012 搭建C语言项目</a></p></li><li><p>(1) <a href="/download/slides/C_programming/Lab_session_%EF%BC%881st%EF%BC%89.pdf">Lab Session(1st)</a></p><blockquote><ul><li><a href="/download/slides/C_programming/lab_session_guide_1.pdf">实验指导文档</a></li><li>(2021-2022-2)-52040115-19870001-3 提交时间：2022年3月6日 24点前。文档格式PDF！</li><li>(2021-2022-2)-52040115-19870001-1 提交时间：2022年3月17日 24点前。文档格式PDF！</li><li>(2021-2022-2)-52040115-19870001-2 提交时间：2022年3月24日 24点前。文档格式PDF！</li><li>将所有文档打包成一个压缩文档，命名为：学号+姓名 如： 20198823_张三</li></ul></blockquote><p>（2）Lab session(2nd)</p><blockquote><p><strong>实验任务</strong>：</p></blockquote><blockquote><ul><li>第四章课后习题</li><li>教辅第19章实验四</li></ul></blockquote><blockquote><p><strong>提交时间</strong>：</p><ul><li>(2021-2022-2)-52040115-19870001-3 提交时间：2022年3月21日 24点前。文档格式PDF！</li><li>(2021-2022-2)-52040115-19870001-1 提交时间：2022年4月3日 24点前。文档格式PDF！</li><li>(2021-2022-2)-52040115-19870001-2 提交时间：2022年4月14日 24点前。文档格式PDF！</li><li>将所有文档打包成一个压缩文档，命名为：学号+姓名 如： 20198823_张三</li></ul></blockquote><p>（3）Lab session(3rd)</p><blockquote><p><strong>实验任务</strong>：</p></blockquote><blockquote><ul><li>输出5*5的偶数矩阵（nested for loop）</li><li>第五章课后习题</li><li>教辅第19章实验五</li></ul></blockquote><blockquote><p><strong>提交时间</strong>：</p><ul><li>(2021-2022-2)-52040115-19870001-3 提交时间：2022年3月28日 24点前。文档格式PDF！</li><li>(2021-2022-2)-52040115-19870001-1 提交时间：2022年4月16日 24点前。文档格式PDF！</li><li>(2021-2022-2)-52040115-19870001-2 提交时间：2022年4月30日 24点前。文档格式PDF！</li><li>将所有文档打包成一个压缩文档，命名为：学号+姓名 如： 20198823_张三</li></ul></blockquote><p>（4）Lab session(4th)</p><blockquote><p><strong>实验任务</strong>：</p></blockquote><blockquote><ul><li>第六章课后习题</li><li>教辅第19章实验六</li></ul></blockquote><blockquote><p><strong>提交时间</strong>：</p><ul><li>(2021-2022-2)-52040115-19870001-3 提交时间：2022年4月4日 24点前。文档格式PDF！</li><li>(2021-2022-2)-52040115-19870001-1 提交时间：2022年5月22日 24点前。文档格式PDF！</li><li>(2021-2022-2)-52040115-19870001-2 提交时间：2022年5月22日 24点前。文档格式PDF！</li><li>将所有文档打包成一个压缩文档，命名为：学号+姓名 如： 20198823_张三</li></ul></blockquote><p>（5）Lab session(5th)</p><blockquote><p><strong>实验任务</strong>：</p></blockquote><blockquote><ul><li>第七章课后习题</li><li>教辅第19章实验七、八。</li></ul></blockquote><blockquote><p><strong>提交时间</strong>：</p><ul><li>(2021-2022-2)-52040115-19870001-3 提交时间：2022年4月17日 24点前。文档格式PDF！</li><li>将所有文档打包成一个压缩文档，命名为：学号+姓名 如： 20198823_张三</li></ul></blockquote><p>（6）Lab session(6th)</p><blockquote><p><strong>实验任务</strong>：</p></blockquote><blockquote><ul><li>第八、九、十章课后习题</li><li>教辅第19章实验九、十、十一、十二。</li></ul></blockquote><blockquote><p><strong>提交时间</strong>：</p><ul><li>(2021-2022-2)-52040115-19870001-3 提交时间：2022年6月5日 24点前。文档格式PDF！</li><li>将所有文档打包成一个压缩文档，命名为：学号+姓名 如： 20198823_张三</li></ul></blockquote></li></ol><h1>训练题</h1><p><a href="/download/slides/C_programming/c_exercise.doc">《高级语言程序设计基础-C语言教程》习题</a></p><h1>课程设计 「期中考」</h1><p>待更新</p><blockquote><p>占比30%</p></blockquote><h1>关于期末考</h1><p>期末参加学校统一安排考试</p><ol><li><a href="/download/slides/C_programming/sample_test/sample_test_questions.docx">样卷</a></li><li><a href="/download/slides/C_programming/sample_test/sample_test_answer.pdf">样卷答案</a></li></ol><blockquote><p>请认真复习，利用好样卷进行复习检测，ps：不会有同样的题，还是要认认真真搞懂！</p></blockquote><h1>推荐书籍清单</h1><ol><li>《C Primer Plus》</li><li>《C语言程序设计：现代方法》</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>课程</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
